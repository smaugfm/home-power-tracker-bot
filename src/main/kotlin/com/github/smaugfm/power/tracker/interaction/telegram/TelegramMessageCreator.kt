package com.github.smaugfm.power.tracker.interaction.telegram

import com.github.smaugfm.power.tracker.dto.EventType
import com.github.smaugfm.power.tracker.stats.EventStats
import net.time4j.PrettyTime
import org.springframework.stereotype.Component
import java.time.Duration
import java.time.temporal.ChronoUnit
import java.util.Locale

@Component
class TelegramMessageCreator {
    fun getTelegramMessages(stats: List<EventStats>): List<String> =
        stats.map(::createText)

    fun unstableNetworkMessage(duration: Duration) =
        "–ú–µ—Ä–µ–∂–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –±–æ—Ç–∞ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∞.\n–ß–∞—Å –ø–æ–≥–∞–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –º–µ—Ä–µ–∂—ñ: ${humanReadable(duration)}"

    private fun createText(stats: EventStats): String =
        when (stats) {
            is EventStats.Single ->
                "${simpleSingleEventText(stats)} \n\n ${extendedSingleEventText(stats)}"

            is EventStats.Summary -> TODO()
        }

    private fun extendedSingleEventText(stats: EventStats.Single) =
        when (stats) {
            is EventStats.Single.LastInverseOnly -> {
                if (stats.state)
                    "–°–∫—ñ–ª—å–∫–∏ –Ω–µ –±—É–ª–æ: " + this.humanReadable(stats.lastInverse)
                else
                    when (stats.type) {
                        EventType.POWER -> "–°–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–º–∞–ª–æ—Å—å: "
                        EventType.ISP -> "–°–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–º–∞–≤—Å—è: "
                    } + this.humanReadable(stats.lastInverse)
            }

            is EventStats.Single.IspDownStats -> {
                val str =
                    StringBuilder("–°–∫—ñ–ª—å–∫–∏ –±—É–≤: ${this.humanReadable(stats.lastInverse)}.")
                if (stats.lastUPSOperation != null)
                    str.append("\n–ó —Ü—å–æ–≥–æ, –ø—Ä–∞—Ü—é–≤–∞–≤ –î–ë–ñ: ${this.humanReadable(stats.lastUPSOperation)}")
                if (stats.lastUPSCharge != null)
                    str.append(
                        "\n–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–∞—Ä—è–¥–∫–∏ –∞–∫—É–º—É–ª—è—Ç–æ—Ä—ñ–≤ –î–ë–ñ: ${
                            this.humanReadable(
                                stats.lastUPSCharge
                            )
                        }"
                    )
                str.toString()
            }
        }

    private fun simpleSingleEventText(stats: EventStats.Single) =
        when (stats.type) {
            EventType.POWER -> "${if (stats.state) "üü¢" else "üî¥"} –°–≤—ñ—Ç–ª–æ " +
                    if (stats.state) "–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ" else "–∑–Ω–∏–∫–ª–æ"

            EventType.ISP -> "${if (stats.state) "üü©" else "üü•"} –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç " +
                    if (stats.state) "–∑'—è–≤–∏–≤—Å—è" else "–∑–Ω–∏–∫"
        }

    private fun humanReadable(duration: Duration): String =
        PrettyTime.of(Locale("uk", "UA"))
            .print(duration.truncatedTo(ChronoUnit.MINUTES))
}
