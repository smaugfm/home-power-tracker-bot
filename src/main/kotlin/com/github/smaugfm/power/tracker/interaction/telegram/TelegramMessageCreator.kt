package com.github.smaugfm.power.tracker.interaction.telegram

import com.github.smaugfm.power.tracker.*
import com.github.smaugfm.power.tracker.stats.EventStats
import org.springframework.stereotype.Component
import java.time.Duration

@Component
class TelegramMessageCreator {
    private val statsSeparator = "\n\n"

    fun getTelegramMessage(stats: List<EventStats>): String =
        stats.flatMap(this::createText).joinToString(statsSeparator)

    fun unstableNetworkMessage(duration: Duration) =
        "–ú–µ—Ä–µ–∂–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –±–æ—Ç–∞ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ ${duration.humanReadable()}"

    private fun createText(stats: EventStats): List<String> =
        when (stats) {
            is EventStats.Single ->
                listOfNotNull(
                    firstSingleEventText(stats),
                    (stats as? EventStats.Single.Consecutive)?.let(::consecutiveSingleEventText)
                )

            is EventStats.Summary -> summaryStatsText(stats)
            is EventStats.LastWeekPowerScheduleImage -> emptyList()
        }

    private fun firstSingleEventText(stats: EventStats.Single) =
        when (stats.type) {
            EventType.POWER -> "${if (stats.state) "üü¢" else "üî¥"} –°–≤—ñ—Ç–ª–æ " +
                    if (stats.state) "–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ" else "–∑–Ω–∏–∫–ª–æ"

            EventType.ISP -> "${if (stats.state) "üü©" else "üü•"} –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç " +
                    if (stats.state) "–∑'—è–≤–∏–≤—Å—è" else "–∑–Ω–∏–∫"
        }

    private fun consecutiveSingleEventText(stats: EventStats.Single.Consecutive) =
        when (stats) {
            is EventStats.Single.Consecutive.Other -> {
                if (stats.state)
                    "–°–∫—ñ–ª—å–∫–∏ –Ω–µ –±—É–ª–æ: " + stats.lastInverse.humanReadable()
                else
                    when (stats.type) {
                        EventType.POWER -> "–°–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–º–∞–ª–æ—Å—å: "
                        EventType.ISP -> "–°–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–º–∞–≤—Å—è: "
                    } + stats.lastInverse.humanReadable()
            }

            is EventStats.Single.Consecutive.IspDown -> {
                val str =
                    StringBuilder("–°–∫—ñ–ª—å–∫–∏ –±—É–≤: ${stats.lastInverse.humanReadable()}")
                if (stats.lastUPSOperation != null)
                    str.append("\n–ó —Ü—å–æ–≥–æ, –ø—Ä–∞—Ü—é–≤–∞–≤ –î–ë–ñ: ${stats.lastUPSOperation.humanReadable()}")
                if (stats.lastUPSCharge != null)
                    str.append(
                        "\n–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–∞—Ä—è–¥–∫–∏ –∞–∫—É–º—É–ª—è—Ç–æ—Ä—ñ–≤ –î–ë–ñ: ${
                            stats.lastUPSCharge.humanReadable()
                        }"
                    )
                str.toString()
            }
        }

    private fun summaryStatsText(stats: EventStats.Summary): List<String> {
        val sb = StringBuilder("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ ")
        when (stats.type) {
            EventType.POWER -> sb.append("—Å–≤—ñ—Ç–ª—É")
            EventType.ISP -> sb.append("—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        }
        sb.append(" –∑–∞ ")
        sb.append(when (stats.period) {
            is SummaryStatsPeriod.Custom -> {
                stats.period.lastDays.let {
                    if (it == 1) "–æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å"
                    else "–æ—Å—Ç–∞–Ω–Ω—ñ ${Duration.ofDays(it.toLong()).humanReadable()}"
                }
            }

            SummaryStatsPeriod.LastMonth -> "–æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å"
            SummaryStatsPeriod.LastWeek -> "–æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å"
            SummaryStatsPeriod.LastYear -> "–æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–∫"
        })
        sb.append(":\n\n")

        val was = when (stats.type) {
            EventType.POWER -> "–±—É–ª–æ –Ω–∞—è–≤–Ω–µ"
            EventType.ISP -> "–ø—Ä–∞—Ü—é–≤–∞–≤"
        }

        sb.append("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–∫–ª—é—á–µ–Ω—å: ${stats.turnOffCount}\n\n")
        sb.append("–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤—Å—å–æ–≥–æ $was: ${stats.upTotal.humanReadable()}\n")
        sb.append("–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤—Å—å–æ–≥–æ –Ω–µ $was: ${stats.downTotal.humanReadable()}\n\n")

        sb.append("–ü—Ä–æ—Ü–µ–Ω—Ç —á–∞—Å—É —Å–∫—ñ–ª—å–∫–∏ $was: ${Fmt.escape(stats.upPercent.format(0))}%\n\n")

        format(sb, stats.type, stats.upPeriodicStats)
        format(sb, stats.type, stats.downPeriodicStats)

        return listOf(sb.toString())
    }

    private fun format(sb: StringBuilder, type: EventType, periodicStats: PeriodicStats) {
        val byType = when (type) {
            EventType.POWER -> if (periodicStats.state) "–∑—ñ —Å–≤—ñ—Ç–ª–æ–º" else "–±–µ–∑ —Å–≤—ñ—Ç–ª–∞"
            EventType.ISP -> if (periodicStats.state) "–∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º" else "–±–µ–∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
        }
        sb.append("–ù–∞–π–¥–æ–≤—à–∏–π –ø–µ—Ä—ñ–æ–¥ $byType: ${periodicStats.longestPeriod.humanReadable()}\n")
        sb.append("–ù–∞–π–∫–æ—Ä–æ—Ç—à–∏–π –ø–µ—Ä—ñ–æ–¥ $byType: ${periodicStats.shortestPeriod.humanReadable()}\n")
        sb.append("–ú–µ–¥—ñ–∞–Ω–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ $byType: ${periodicStats.medianPeriod.humanReadable()}\n\n")
    }
}
